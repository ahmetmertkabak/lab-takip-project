// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  STUDENT
  TEACHER
}

enum ReservationStatus {
  PENDING
  APPROVED
  REJECTED
  CANCELLED
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  password      String
  role          Role      @default(STUDENT)
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  reservations  Reservation[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([provider, providerAccountId])
}
 
model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@unique([identifier, token])
}

model Lab {
  id        Int         @id @default(autoincrement())
  name      String      @unique
  computers Computer[]
}

model Computer {
  id           Int           @id @default(autoincrement())
  name         String
  labId        Int
  lab          Lab           @relation(fields: [labId], references: [id], onDelete: Cascade)
  reservations Reservation[]
}

model Reservation {
  id         Int               @id @default(autoincrement())
  reason     String
  startTime  DateTime
  endTime    DateTime
  status     ReservationStatus @default(PENDING)
  userId     String
  user       User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  computerId Int
  computer   Computer          @relation(fields: [computerId], references: [id], onDelete: Cascade)
  createdAt  DateTime          @default(now())
}
